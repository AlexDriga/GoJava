Создайте часть System, которая может найти комнаты в отелях для бронирования и сохранить их в DataBase.
Архитектура следующая:
Класс Room, который отображает сущность комнаты, которая используется в системе.
API интерфейс и 3 его реализации.
DAO интерфейс и его реализацию.
Controller, который будет содержать логику.

Также создайте класс Main с методом main, чтобы отобразить результат.

!!! Сначала создайте UML диаграммы, и только потом пишите код. !!!

Задание 1

Класс Room должен содержать следующие поля:
long id
int price
int persons
Date dateAvailableFrom
String hotelName
String cityName

Создайте get-,set-методы и конструктор с аргументами - всеми полями.

Задание 2

Перегрузите методы equals и hashCode (2 объекты Room равны, когда поля price, persons и cityName равны).

Задание 3

Создайте API интерфейс с одним методом
Room[] findRooms(int price, int persons, String city, String hotel)

Задание 4

Создайте 3 реализации API, которые называются:
BookingComAPI,
TripAdvisorAPI,
GoogleAPI.
В каждой реализации есть глобальная переменная Room[] rooms, которая должна быть инициализована констуктором по умолчанию пятью разными объектами Room.

Задание 5

Создать интерфейс DAO и его реализацию. Методы выводят название операции и объекта, над которым она произведена.
Room save(Room room)
boolean delete(Room room)
Room update(Room room)
Room findById(long id)

Задание 6

Создайте класс Controller, в котором есть глобальная переменная API apis[] = new API[3], которая содержит все реализации интерфейса API.
Также у Controller есть 2 метода:
Room[] requestRooms(int price, int persons, String city, String hotel)
ищет все номера с запрашиваемыми параметрами.

Все методы используют доступные методы API для поиска.
Найденные номера формируют новую DB.

Room[] check(API api1, API api2)

Проверить, сколько одинаковых номеров возвращают две разные API.

Задание 7

В методе класса Main создайте Controller и сделайте 3 запроса с разными параметрами, чтобы найти номера.
Также проверьте все методы 3 раза с разными API, чтобы продемонстрировать, как работает программа.